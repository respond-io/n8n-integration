name: NPM Package Release Workflow
on:
  pull_request:
    types: [closed]
    branches:
      - master
permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  audit:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci --ignore-scripts
      - run: npm audit --omit=dev

  tests:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: audit
    outputs:
      tests_passed: ${{ steps.run_tests.outcome == 'success' }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci --ignore-scripts
      - name: Run tests
        id: run_tests
        run: npm test

  create_release:
    if: github.event.pull_request.merged == true && needs.tests.outputs.tests_passed == 'true'
    needs: tests
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          target-branch: master

  publish_release:
    if: github.event.pull_request.merged == true && needs.create_release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci --ignore-scripts
      - run: npm run release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify_slack:
    needs: publish_release
    if: success()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Extract package name
        id: package_info
        run: |
          echo PACKAGE_NAME="$(jq -r .name package.json)" >> $GITHUB_OUTPUT
      - name: Extract package version
        id: package_version
        run: |
          echo PACKAGE_VERSION="$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - name: Slack Notification
        run: |
          curl -L \
            -X POST \
            ${{ secrets.SLACK_PACKAGE_RELEASE_WORKFLOW_URL }} \
            -d "{\"package_name\":\"${{ steps.package_info.outputs.PACKAGE_NAME }}-v${{ steps.package_version.outputs.PACKAGE_VERSION }}\"}"